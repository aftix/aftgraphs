name: main

on:
  push:
    branches: [ master ]
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  checks: write

jobs:
  sort:
    name: Check that Cargo deps are listed alphabetically
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - uses: dtolnay/rust-toolchain@stable
      - uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-sort
      - uses: Swatinem/rust-cache@v2

      - name: Run cargo-sort
        uses: clechasseur/rs-cargo@v2
        with:
          command: sort
          args: --workspace --no-format --check

  build:
    name: Build aftgraphs
    strategy:
      matrix:
        arch: 
          - x86_64-unknown-linux-gnu
          - wasm32-unknown-unknown
        include:
          - profile: dev
            target: debug
          - profile: release
            target: release
    runs-on: ubuntu-latest

    steps:
      - uses: daaku/gh-action-apt-install@49782cd9703eaa5c436b9e6caa6529e7c5e50ecd
        with:
          packages: libx264-dev
        if: "${{ matrix.arch != 'wasm32-unkown-unknown' }}"

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.arch }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.arch }}-${{ matrix.profile }}

      - name: Build
        uses: clechasseur/rs-cargo@v2
        with:
          command: build
          args: --workspace --profile ${{ matrix.profile }} --target ${{ matrix.arch }}
  clippy:
    name: Cargo clippy
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch:
          - x86_64-unknown-linux-gnu
          - wasm32-unknown-unknown
    steps:
      - uses: daaku/gh-action-apt-install@49782cd9703eaa5c436b9e6caa6529e7c5e50ecd
        with:
          packages: libx264-dev
        if: "${{ matrix.arch != 'wasm32-unkown-unknown' }}"

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: ${{ matrix.arch }}

      - uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.arch }}

      - name: Run Clippy
        uses: auguwu/clippy-action@1.3.0
        with:
          all-features: true
          deny: warnings
          check-args: --target ${{ matrix.arch }}
          token: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Cargo nextest
    runs-on: ubuntu-latest
    steps:
      - uses: daaku/gh-action-apt-install@49782cd9703eaa5c436b9e6caa6529e7c5e50ecd
        with:
          packages: libx264-dev
        if: "${{ matrix.arch != 'wasm32-unkown-unknown' }}"

      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Install cargo-nextest
        uses: baptiste0928/cargo-install@v3
        with:
          crate: cargo-nextest

      - name: Run tests
        uses: clechasseur/rs-cargo@v2
        with:
          command: nextest
          args: run

  deploy:
    name: Deploy simulations to web server
    runs-on: ubuntu-latest
    needs: [build, clippy, test]
    if: >-
      (github.event_name == 'push' && github.event.base_ref == 'master') ||
      github.event_name == 'workflow_dispatch' ||
      (
        github.event_name == 'pull_request' && 
        github.event.action == 'closed' &&
        github.event.pull_request.merged &&
        github.event.pull_request.base.ref == 'master'
      )
    concurrency:
      group: deploy
      cancel-in-progress: true
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown

      - uses: Swatinem/rust-cache@v2

      - name: Install wasm-bindgen-cli
        uses: baptiste0928/cargo-install@v3
        with:
          crate: wasm-bindgen-cli
      
      - name: Build WASM targets
        run: ./buildwasm.sh

      - name: Archive WASM bundles
        run: |
          cd target/
          rm -rf simulations/
          mv web/ simulations/
          tar cvf simulations.tar.gz simulations/

      - name: Create ssh key from repository secret
        run: |
          install -m 600 -D /dev/stdin ~/.ssh/id_ed25519 <<< "${{ secrets.WWW_PRIVATE_KEY }}"

      - name: Add web server to ssh known hosts
        run: ssh-keyscan -H aftix.xyz > ~/.ssh/known_hosts

      - name: Deploy simulations
        run: |
          scp target/simulations.tar.gz "www-data@aftix.xyz:~/simulations.tar.gz"
          ssh "www-data@aftix.xyz" 'sh -ls' <<< "$SCRIPT"
        env:
          SCRIPT: >-
            cd $HOME ;
            tar xvf simulations.tar.gz ;
            rm simulations.tar.gz
            
